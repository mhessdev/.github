# https://www.notion.so/prismaio/Prisma-Development-Slack-App-49969876d7a1449991336ed2e5c1e87c
name: Slack Deployment Message
on:
  workflow_call:
    inputs:
      url:
        description: URL of the deployment.
        type: string
        required: true
      production:
        description: Is this a production deployment? If it is, a specific slack channel is used. By default is true when branch is trunk. Accepts "true" or "false".
        type: string
        required: false
    secrets:
      vercelToken:
        description: The token to interact with the Vercel API to get additional deployment info. If given, the deployment is inferred to be a Vercel deployment.
        required: false
      slackToken:
        required: true
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub Context Data ðŸ–¨
        run: echo '${{toJson(github)}}'
      - name: Print GitHub Environment variables ðŸ–¨
        run: npx @bahmutov/print-env GITHUB
      - name: Build Slack Payload
        run: |
          # TODO get this from the repository default branch setting.
          trunkBranchName='main'
          # On push event github.ref will be "refs/heads/${branchName}"
          # On pull_request event closed type github.ref will be "${branchName}" of the branch being merged into.
          if [ '${{inputs.production}}' == '' ]; then
            if [ '${{github.ref}}' == "$trunkBranchName" ]; then
              isProduction='true'
            elif [ '${{github.ref}}' == "refs/heads/$trunkBranchName" ]; then
              isProduction='true'
            else
              isProduction='false'
            fi
          else 
            isProduction='${{inputs.production}}'
          fi
          echo "isProduction="$isProduction""
          
          echo "Get Commit Info:"
          commitInfo=$(curl \
            --silent \
            --fail \
            --request GET \
            --header "accept: application/vnd.github.v3+json" \
            --header "authorization: Bearer ${{github.token}}" \
            "https://api.github.com/repos/${{github.repository}}/commits/${{github.sha}}" \
          )
          echo $commitInfo | jq --color-output

          # We cut away the `https://` to get the hostname
          # In some cases, like act CLI, there is no HTTPS prefix.
          echo 'inputs.url = ${{inputs.url}}'
          deploymentHostName=''
          if [[ '${{inputs.url}}' == https://* ]]; then
            echo "inputs.url has https prefix"
            deploymentHostName=$(echo '${{inputs.url}}' | cut -c 9-)
            echo $deploymentHostName
          else
            echo "inputs.url has no https prefix"
            deploymentHostName='${{inputs.url}}'
          fi
          echo "deploymentHostName="$deploymentHostName"" >> $GITHUB_ENV
          echo "deploymentHostName=$deploymentHostName"

          # TODO Add support for other deployment types.
          if [ '${{secrets.vercelToken}}' != '' ]; then
            echo "Get Vercel Deployment Info:"
            deploymentInfo=$(curl \
              --silent \
              --fail \
              --header "authorization: Bearer ${{secrets.vercelToken}}" \
              "https://api.vercel.com/v13/deployments/${deploymentHostName}" \
            )
            echo $deploymentInfo | jq --color-output

            echo "build commitPullRequestNumber"
            commitPullRequestNumber=$(echo $deploymentInfo | jq -r ".meta.githubPrId")
            echo "commitPullRequestNumber="$commitPullRequestNumber""

            echo "build appName"
            appName=$(echo $deploymentInfo | jq -r ".name")
            echo "appName="$appName""

            echo "build deploymentInspectorUrl"
            deploymentInspectorUrl=$(echo $deploymentInfo | jq -r ".inspectorUrl")
            echo "deploymentInspectorUrl="$deploymentInspectorUrl""
          fi

          echo "build various values"

          echo "build commit_author_display_name"
          commit_author_display_name=$(echo "$commitInfo" | jq -r '.commit.author.name')
          echo "commit_author_display_name="$commit_author_display_name""

          echo "build commit_author_login"
          commit_author_login=$(echo "$commitInfo" | jq -r '.author.login')
          echo "commit_author_login="$commit_author_login""

          echo "build commit_message"
          commit_message=$(echo "$commitInfo" | jq -r '.commit.message')
          echo "commit_message="$commit_message""

          echo "build commit_sha_short"
          commit_sha_short=$(echo '${{github.sha}}' | cut -c-7)
          echo "commit_sha_short="$commit_sha_short""

          echo "build commit_ref"
          commit_ref=$(echo $commit_ref | jq -r ".meta.githubCommitRef")
          echo "commit_ref="$commit_ref""
          
          if [ "$commitPullRequestNumber" == "null" ]; then
            unset commitPullRequestNumber 
          fi
          
          if [ "$isProduction" == 'true' ]; then
            #feed-pdp-deployments
            slackChannel='C033BSD1YSE' 
          else
            #feed-pdp-deployments-preview
            slackChannel='C033EL7UMS6'
          fi

          if [ -z $commitPullRequestNumber ]; then
            pull_request_slack_message_part="(not part of an open PR)"
          else
            pull_request_slack_message_part="from pull request <https://github.com/${{github.repository}}/pull/${commitPullRequestNumber}|#${commitPullRequestNumber}>"
          fi
          
          echo "build slackText"
          slackText=$(cat <<EOF
            ðŸš€  *${appName}*
            Commit <https://github.com/${{github.repository}}/commit/${{github.sha}}|${commit_sha_short}> by <https://github.com/${commit_author_login}|${commit_author_display_name}> ${pull_request_slack_message_part} was successfully deployed.
            ${commit_message}
            â†’  <https://${deploymentHostName}|View Deployment>
            â†’  <${deploymentInspectorUrl}|Inspect deployment>
          EOF
          )

          echo "build slackPayload"
          slackPayload=$(jq \
            --null-input \
            --arg slackChannel "$slackChannel" \
            --arg slackText "$slackText" \
            '
              {
                "channel": $slackChannel,
                "unfurl_links": false,
                "unfurl_media": false,
                "blocks": [
                  { "type": "section", "text": { "type": "mrkdwn", "text": $slackText }}
                ]
              }
            ' \
          )
          echo "SLACK_PAYLOAD="$slackPayload"" >> $GITHUB_ENV
          echo "$slackPayload" | jq --color-output
      - name: Write message to Slack channel
        run: |
          curl \
            --silent \
            --fail \
            --request POST \
            --header "Content-type: application/json" \
            --header "Authorization: Bearer ${{secrets.slackToken}}" \
            --data '${{env.SLACK_PAYLOAD}}' \
            https://slack.com/api/chat.postMessage | jq --color-output
